依赖注入是指在开发项目中，经常需要在一个对象A中创建另一个对象的实例，这种行为会导致A依赖于B，也是产生耦合的常见形式。
因此，如果在类中不通过创建实例的方式依赖对象，而是通过提供的参数注入方法，将需要依赖的类和提供依赖的类，实现隔离，降低耦合。
反射也可以实现依赖注入功能，只不过注入时机是在运行期间，而Dagger的注入时机是在编译期间。

Dagger的优点：
1. 访问全局对象实例：提供访问全局对象的简易方式，被生命为单例的实例均可使用注解进行访问。
2. 配置复杂依赖关系：通过依赖关系自动生成易于分析的代码，不需要关注类的实例创建顺序，传递实例引用至相应的方法参数。
3. 测试单元模块便捷：将类的依赖关系独立出来，可以抽取不同的模块进行测试，将依赖的注入和配置独立于组件之外。

Dagger主要含有三个部分，即注入（Inject）、模块（Module）、组件（Component）
1. 注入负责在类中注入依赖，将类的实例注入至声明
2. 模块负责提供支持依赖注入类的实例
3. 组件负责将模块注册入类中